import type { NextPage } from 'next'
import Head from 'next/head'
import { trpc } from '../../../utils/trpc'
import { useRouter } from 'next/router'
import AppHeader from '../../../components/app-header'
import { useSession } from 'next-auth/react'
import PostEditor from '../../../components/post-editor'
import LoadingPageShell from '../../../components/loading-page-shell'

const EditPost: NextPage = () => {
  const { status } = useSession()
  const router = useRouter()
  const postMutation = trpc.useMutation(['blog.editPost'])
  const deletePostMutation = trpc.useMutation(['blog.deletePost'])
  const { slug } = router.query
  const post = trpc.useQuery([
    'blog.getOne',
    (Array.isArray(slug) ? slug[0] : slug ?? '') as string,
  ])

  const editPost = async ({
    content,
    tagline,
    title,
  }: {
    content: string
    tagline: string
    title: string
  }) => {
    const editedPost = await postMutation.mutateAsync({
      postID: post.data!.id,
      content,
      tagline,
      title,
    })
    if (editedPost) {
      router.push('/post/' + editedPost.slug)
    }
  }

  const deletePost = async () => {
    const deletedPost = await deletePostMutation.mutateAsync(post.data!.id)
    if (deletedPost) {
      router.push('/')
    }
  }

  if (status === 'loading' || post.isLoading) {
    return <LoadingPageShell />
  }

  if (status === 'unauthenticated' || (post.data && !post.data.isOwnPost)) {
    router.push('/')
  }

  return (
    <>
      <Head>
        <title>Edit Post</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col">
        <AppHeader></AppHeader>
        <PostEditor
          post={post.data!}
          isEditing={true}
          isSubmitting={postMutation.isLoading}
          isDeleting={deletePostMutation.isLoading}
          onSubmit={editPost}
          onDelete={deletePost}
        ></PostEditor>
      </div>
    </>
  )
}

export default EditPost
